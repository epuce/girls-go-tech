:root{ /*begining of the system*/
--nav-bar-height: 80px; /*defining variable in css*/
}

body {
    margin: 0;
    padding-top: var(--nav-bar-height); /* selecting variable in css as a value. 80 px because if we don't add this, then the fisrt line is hidden by the nav-bar. because nav-bar has a position fixed, which covers everything underneath it*/
}
ul {
    padding: 0;
    margin: 0;
    list-style: none;
}

#nav-bar {
    height: 80px;
    background: #2FC1C8;
    padding: 0 10% 0 10%;
    position: fixed;
    top: 0;
    width: 80%; /* because the with is only for the content. if we add the padding (for nav bar 10+10%), then it takes up 100% of the screen size*/
}

.nav-bar_link {
    height: 100%; /* same height as the parent element*/
    width: 83px;
    display: inline-block; /* because anchor elementis an inline element and to change its size we need it to be block or inline block*/
}

.nav-bar_link img {
    height: 100%;
    margin-left: -30px;
}

.menu {
    float: right;
    line-height: var(--nav-bar-height); /* line height should be as high as the parent*/
    position: relative;
}

.menu:hover .menu-dropdown {
    display:block; /* when we have hover state for menu class, we change property for .menu-dropdown class. If we hover parent element, change child element's property*/
}

.menu-dropdown {
    display: none; /*the element is removed from layout, not visible, not interacting with any other content on the page. It does not take up nay space on the page. Naother option is property visibility: none - in this case the element takes up space, but is not visually visible*/
    position: absolute; /* searched for the parent with position set to relative and positions itself against that parent. if there is no parent with position relative set, then it positions itself against the body*/
    line-height: initial; /*change properties set by parent element back to default value, ignore parent element value*/
    text-align: center;
    left: 50%;
    transform: translateX(-50%);
    background: #2FC1C8;
    border-radius: 0 0 6px 6px;
}

.menu-dropdown li {
    padding: 5px 10px 5px 10px;
}

.img-wrapper img {
    width: 250px;
}

.img-wrapper img:first-child { /*first-child means we are slecting the fist child of image-wrapper class childs. Another option: nth-child(3) - specifying number, which child. or :nth-child(even) or :n-th-child(odd) - add style to every even or odd row*/
    width: 150px;
    height: 80px;
}

.img-wrapper {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-evenly;
    align-items: center; /*centers items verticaly, if items have different sizes*/
}

.number-wrapper {
    display: flex;
    flex-wrap:wrap;
    justify-content: space-around;
}

.number-wrapper div {
    width: 250px;
    height: 250px;
    background: rgba(0,0,0,0.1);
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 32px;
}

.number-wrapper div:nth-child(5) {
    order: 1; /*change order. all elements that don't have order idicated are fisr, but after that elements that have order are ordered according to specified properties*/
}
.number-wrapper div:nth-child(3) {
    order: 2;
}
.number-wrapper div:nth-child(1) {
    order: 3;
}

.grid-wrapper div:nth-child(1) {
    background: red;
    grid-column-start: 1; /*tells where the column starts*/
    grid-column-end: 3; /*tells before which column ends*/
    grid-row-start: 1; /*the smae with rows*/
    grid-row-end: 3;
}
.grid-wrapper div:nth-child(2) {
    background: blue;
}
.grid-wrapper div:nth-child(3) {
    background: green;
}
.grid-wrapper div:nth-child(4) {
    background: black;
}
.grid-wrapper div:nth-child(5) {
    background: purple;
}

.grid-wrapper {
    display: grid;
    grid-template-columns: 300px 30% auto;
    grid-template-rows: 50px 100px 150px;
}